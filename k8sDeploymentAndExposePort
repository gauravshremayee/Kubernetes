kubectl apply -f https://k8s.io/examples/application/guestbook/redis-master-deployment.yaml
kubectl get pods
kubectl get deployment
kubectl get rs
Create a Redis service:kubectl apply -f https://k8s.io/examples/application/guestbook/redis-master-service.yaml
kubectl get svc | grep redisThe output displays the service created:NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEredis-master ClusterIP 10.0.0.213 <none> 6379/TCP 27sVerify that the Redis server is running in the pod and listening on port 6379:kubectl get pods redis-master-765d459796-258hz --template='{{(index (index .spec.containers 0).ports 0).containerPort}}{{"\n"}}'
Forward a local port to a port on the podkubectl port-forward allows using resource name, such as a pod name, to select a matching pod to port forward to since Kubernetes v1.10.kubectl port-forward redis-master-765d459796-258hz 7000:6379which is the same askubectl port-forward pods/redis-master-765d459796-258hz 7000:6379orkubectl port-forward deployment/redis-master 7000:6379orkubectl port-forward rs/redis-master 7000:6379orkubectl port-forward svc/redis-master 7000:6379Any of the above commands works. The output is similar to this:I0710 14:43:38.274550 3655 portforward.go:225] Forwarding from 127.0.0.1:7000 -> 6379I0710 14:43:38.274797 3655 portforward.go:225] Forwarding from [::1]:7000 -> 6379Start the Redis command line interface:redis-cli -p 7000At the Redis command line prompt, enter the ping command:127.0.0.1:7000>ping
